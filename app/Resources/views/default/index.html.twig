{% extends 'base.html.twig' %}

{% block body %}
    <div id="wrapper">
        <div id="container">
            <div id="welcome">
                <h1>
                    <small>[after] Welcome to</small><br>
                    Feater Template App<br>
                    <small> based on Symfony {{ constant('Symfony\\Component\\HttpKernel\\Kernel::VERSION') }}</small>
                </h1>

                {% if identiconImageData is not empty %}
                    <div class="identicon"><img src="data:image/png;base64,{{ identiconImageData }}"></div>
                {% endif %}
            </div>

            <div id="examples">
                <div class="example example-redis">
                    <h2>Redis</h2>
                    <div>
                        <span class="btn" id="redis-add-dot">Add a dot</span>
                        <span class="btn" id="redis-remove-dot">Remove a dot</span>
                        <span class="btn" id="redis-get-dot-count">Get current dot count</span>
                    </div>
                    <div class="item">
                        <pre class="output" id="redis-output"></pre>
                        {% if app.environment == 'dev' %}
                            <div class="profiler-link" id="redis-profiler-link"></div>
                        {% endif %}
                    </div>
                </div>
                <div class="example example-mysql-1">
                    <h2>MySQL</h2>
                    <div>
                        <span class="btn" id="mysql-generate-uuid">Generate UUID</span>
                    </div>
                    <div class="item">
                        <pre class="output" id="mysql-1-output"></pre>
                        {% if app.environment == 'dev' %}
                            <div class="profiler-link" id="mysql-1-profiler-link"></div>
                        {%  endif %}
                    </div>
                </div>
                <div class="example example-mysql-2">
                    <h2>MySQL2</h2>
                    <div>
                        <span class="btn" id="mysql-list-random-employees">List random employees</span>
                    </div>
                    <div class="item">
                        <pre class="output output-large" id="mysql-2-output"></pre>
                        {% if app.environment == 'dev' %}
                            <div class="profiler-link" id="mysql-2-profiler-link"></div>
                        {%  endif %}
                    </div>
                </div>
                <div class="example example-mailcatcher">
                    <h2>Mailcatcher</h2>
                    <div style="padding: 1em 0;">
                        <label>Email address: </label>
                        <input id="mailcatcher-email-address" type="text"/>
                        <span class="btn" id="mailcatcher-send-email">Send email</span>
                    </div>
                    {% if app.environment == 'dev' %}
                        <div class="item">
                            <div class="profiler-link" id="mailcatcher-profiler-link"></div>
                        </div>
                    {% endif %}
                </div>
            </div>

        </div>
    </div>
{% endblock %}

{% block stylesheets %}
    <style>
        body { background: #F5F5F5; font: 18px/1.5 sans-serif; }
        h1, h2 { line-height: 1.2; margin: 0 0 .5em; }
        h1 { font-size: 36px; }
        h2 { font-size: 21px; margin-bottom: 1em; }
        p { margin: 0 0 1em 0; }
        a { color: #0000F0; }
        a:hover { text-decoration: none; }
        code { background: #F5F5F5; max-width: 100px; padding: 2px 6px; word-wrap: break-word; }
        #wrapper { background: #FFF; margin: 1em auto; max-width: 800px; width: 95%; }
        #container { padding: 2em; }
        #welcome { position: relative; margin-bottom: 2em; padding-right: 140px; }
        #welcome .identicon { position: absolute; top: 0; right: 0; padding: 10px 10px 2px 10px; border: 1px #F5F5F5 solid; }
        #welcome h1 small { font-size: 75%; }
        #examples { margin-top: 2em; }
        #examples .example { border-top: 1px solid #F5F5F5; padding: 1em 0; }
        #examples .btn {
            display: inline-block; background: #5CB85C; color: #FFF; cursor: pointer; padding: 0.3em 0.5em; margin: 0.1em 0;
            user-select: none; -moz-user-select: none; -khtml-user-select: none; -webkit-user-select: none; -ms-user-select: none;
        }
        #examples .btn:hover { background: #2EB82E; color: #FFF; }
        #examples .output { background: #F5F5F5; border: 1px solid #E0E0E0; min-height: 2em; padding: 0.5em; }
        #examples .output-large { white-space: pre-wrap; word-wrap: break-word; }
        #examples .item { padding: 0.5em 0; }
        #examples .profiler-link { padding: 0.2em 0 0 0; font-size: 80%; }
        #examples .profiler-link a { color: #404040; }
        #examples input { padding: 0.5em; font-size: 100%; }

        @media (min-width: 768px) {
            #wrapper { width: 80%; margin: 2em auto; }
            #icon-book { display: inline-block; }
            #status a, #next a { display: block; }

            @-webkit-keyframes fade-in { 0% { opacity: 0; } 100% { opacity: 1; } }
            @keyframes fade-in { 0% { opacity: 0; } 100% { opacity: 1; } }
            .sf-toolbar { opacity: 0; -webkit-animation: fade-in 1s .2s forwards; animation: fade-in 1s .2s forwards;}
        }
    </style>
    <script type="text/javascript">
        window.onload = () => {
            let buttonIdAndUrlAndMethodAndConsoleIds = [
                [
                    'redis-add-dot',
                    '{{ url('redis.addDot') }}',
                    'POST',
                    null,
                    'redis'
                ],
                [
                    'redis-remove-dot',
                    '{{ url('redis.removeDot') }}',
                    'POST',
                    null,
                    'redis'
                ],
                [
                    'redis-get-dot-count',
                    '{{ url('redis.getDotCount') }}',
                    'GET',
                    null,
                    'redis'
                ],
                [
                    'mysql-generate-uuid',
                    '{{ url('mysql.generateUuid') }}',
                    'POST',
                    null,
                    'mysql-1'
                ],
                [
                    'mysql-list-random-employees',
                    '{{ url('mysql.listRandomEmployees') }}',
                    'GET',
                    null,
                    'mysql-2'
                ],
                [
                    'mailcatcher-send-email',
                    '{{ url('mailcatcher.sendEmail') }}',
                    'POST',
                    () => ({'emailAddress': document.getElementById('mailcatcher-email-address').value}),
                    'mailcatcher'
                ]
            ];

            let debugTokenLinkHeader = 'x-debug-token-link';

            buttonIdAndUrlAndMethodAndConsoleIds.forEach(buttonIdAndUrlAndMethodAndConsoleId => {
                document.getElementById(buttonIdAndUrlAndMethodAndConsoleId[0]).onclick = () => {
                    let xhr, output, profilerLink;
                    xhr = new XMLHttpRequest();
                    xhr.open(buttonIdAndUrlAndMethodAndConsoleId[2], buttonIdAndUrlAndMethodAndConsoleId[1], true);
                    if (buttonIdAndUrlAndMethodAndConsoleId[3]) {
                        xhr.setRequestHeader('Content-Type', 'application/json');
                        xhr.send(JSON.stringify(buttonIdAndUrlAndMethodAndConsoleId[3]()));
                    } else {
                        xhr.send();
                    }
                    if (buttonIdAndUrlAndMethodAndConsoleId[4]) {
                        output = document.getElementById(buttonIdAndUrlAndMethodAndConsoleId[4] + '-output');
                        profilerLink = document.getElementById(buttonIdAndUrlAndMethodAndConsoleId[4] + '-profiler-link');

                        xhr.onreadystatechange = () => {

                            if (profilerLink) {
                                let profilerLinkUrl;

                                xhr
                                    .getAllResponseHeaders()
                                    .split('\n')
                                    .forEach(header => {
                                        if (new RegExp(`^${debugTokenLinkHeader}: `, 'i').test(header)) {
                                            profilerLinkUrl = header.slice(debugTokenLinkHeader.length + 2);
                                        }
                                    });

                                if (profilerLink) {
                                    profilerLink.innerHTML = '<a href="' + profilerLinkUrl + '" target="_blank">' + profilerLinkUrl + '</a>';
                                }
                            }

                            if (xhr.readyState != 4 || xhr.status != 200) {
                                if (output) {
                                    output.innerText = 'ERROR';
                                }

                                return;
                            }

                            if (output) {
                                output.innerText = xhr.responseText;
                            }

                        };
                    }
                };
            });
        };
    </script>
{% endblock %}
